<?php

namespace Gallery\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    public function findAllNotEmpty()
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT c0 FROM GalleryMainBundle:Category c0 LEFT JOIN c0.images i0
                    WHERE c0.id IN (SELECT c1.parent FROM GalleryMainBundle:Category c1 LEFT JOIN c1.images i1 
                        WHERE i1.category = c1.id) OR i0.category = c0.id');
        
        
        return $query->getResult();
    }
    
    public function getAllChildrensImages($category_id, $offset=false, $limit=false)
    {
        $images = array(); 
        $resp = array();
        $catsnotempty = $this->findAllNotEmpty();        
        $categories = $this->createQueryBuilder('c')
                ->where('c.parent = :cat_id')
                ->orWhere('c.id = :cat_id')
                ->setParameter('cat_id', $category_id)
                ->getQuery()
                ->getResult();        
        foreach ($categories as $category)
        {
            
            if (in_array($category, $catsnotempty))
            {                
                foreach ($category->getImages() as $image)
                {
                    $images[] = $image;
                }
            }
        }
        if ($limit)
        {
            for ($i = $offset; $i < $offset+$limit; $i++)
            {
                $resp[] = $images[$i];
            }
            return $resp;           
        }
        
        return $images;
    }
    
    public function indexPage()
    {
        $resp = null;
        $categories = $this->findAllNotEmpty();
       
        foreach ($categories as $category)
        {
            if (!$category->getParent())
            {
                $subcategories = $this->createQueryBuilder('c')
                        ->where('c.parent = :parent')
                        ->setParameter('parent', $category->getId())
                        ->getQuery()->getResult();
                $subswithimage = array();
                foreach ($subcategories as $subcategory)
                {
                    if (count($subcategory->getImages()) > 0)
                    {
                        $subswithimage[] = $subcategory;
                    }
                }
                $i = rand(0, count($subswithimage)-1);
                $subwithimage = $subswithimage[$i];
                if (is_object($subwithimage))
                {
                    $resp[] = array(
                        'images' => $subwithimage->getImages()->first(),
                        'catinfo' => $category,
                    );
                    continue;                  
                }                
            }
        }
        
        return $resp;
    }
    
}
